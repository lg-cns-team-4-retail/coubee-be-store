#!/usr/bin/env groovy
def APP_NAME
def APP_VERSION
def DOCKER_IMAGE_NAME
def PROD_BUILD = false

pipeline {
    agent {
        node {
            label 'master'
        }
    }

    parameters {
        gitParameter branch: '',
                branchFilter: '.*',
                defaultValue: 'origin/main',
                description: '',
                listSize: '0',
                name: 'TAG',
                quickFilterEnabled: false,
                selectedValue: 'DEFAULT',
                sortMode: 'DESCENDING_SMART',
                tagFilter: '*',
                type: 'PT_BRANCH_TAG'

        booleanParam defaultValue: false, description: '', name: 'RELEASE'
    }

    environment {
        GIT_URL = "https://github.com/lg-cns-team-4-retail/coubee-be-store.git"
        GITHUB_CREDENTIAL = "github-token"
        ARTIFACTS = "build/libs/**"
        DOCKER_REGISTRY = "moonjiuk"

        // ECR 관련 환경 변수
        AWS_REGION = "ap-northeast-2"
        AWS_ACCOUNT_ID = "310095858382"
        AWS_CREDENTIAL_ID = "aws-token"
        ECR_REPO_NAME = "310095858382.dkr.ecr.ap-northeast-2.amazonaws.com/coubee-be-store"
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: "30", artifactNumToKeepStr: "30"))
        timeout(time: 120, unit: 'MINUTES')
    }

    tools {
        gradle 'Gradle 8.14.2'
        jdk 'OpenJDK 17'
        dockerTool 'Docker'
    }

    stages {
        stage('Set Version') {
            steps {
                script {
                    APP_NAME = sh (
                            script: "gradle -q getAppName",
                            returnStdout: true
                    ).trim()
                    APP_VERSION = sh (
                            script: "gradle -q getAppVersion",
                            returnStdout: true
                    ).trim()

                    DOCKER_IMAGE_NAME = "${DOCKER_REGISTRY}/${APP_NAME}:${APP_VERSION}"

                    sh "echo IMAGE_NAME is ${APP_NAME}"
                    sh "echo IMAGE_VERSION is ${APP_VERSION}"
                    sh "echo DOCKER_IMAGE_NAME is ${DOCKER_IMAGE_NAME}"

                    sh "echo TAG is ${params.TAG}"
                    if( params.TAG.startsWith('origin') == false && params.TAG.endsWith('/main') == false ) {
                        if( params.RELEASE == true ) {
                            APP_VERSION += '-RELEASE'
                            PROD_BUILD = true
                        } else {
                            APP_VERSION += '-TAG'
                        }
                    }
                }
            }
        }

        stage('Build & Test Application') {
            steps {
                sh "gradle clean build"
            }
        }

        stage('Setup Docker Buildx') {
            steps {
                sh '''
                # Buildx 빌더 생성 및 사용 (이미 있으면 무시)
                docker buildx create --name jenkins-multiplatform --use || echo "Builder already exists"
                docker buildx inspect jenkins-multiplatform --bootstrap
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def ECR_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${APP_NAME}:${APP_VERSION}"

                    // ECR에 직접 빌드 및 푸시 (Linux 플랫폼 강제)
                    withAWS(region: AWS_REGION, credentials: AWS_CREDENTIAL_ID) {
                        sh """
                          echo "[INFO] Logging in to ECR..."
                          aws ecr get-login-password --region ${AWS_REGION} \\
                            | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                          echo "[INFO] Building and pushing Docker image for Linux platform..."
                          docker buildx build \\
                            --platform linux/amd64 \\
                            -t ${ECR_IMAGE} \\
                            -f .docker/Dockerfile \\
                            --push .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // 이미 이전 스테이지에서 ECR에 푸시됨
                    echo "[INFO] Docker image already pushed to ECR in previous stage"
                }
            }
        }
    }

    post {
        always {
            script {
                // Buildx 빌더 정리 (선택사항)
                sh 'docker buildx rm jenkins-multiplatform || echo "Builder cleanup skipped"'
            }
        }
    }
}